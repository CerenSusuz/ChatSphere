@page "/admin"
@using ChatSphere.Client.Shared
@using ChatSphere.Domain.DTOs
@using System.Net.Http.Headers
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS

<div class="admin-container">
    @if (!isAdmin)
{
    <p>You are not authorized to view this page.</p>
}
else
{
    <div class="theme-button-container">
            <ThemeToggle />
        </div>

    <div class="admin-header">
            <h2>Admin Panel</h2>
            <span class="admin-user">👤 @username</span>
        </div>

    <div class="admin-grid">
            <div class="admin-section">
                <h3>Rooms</h3>

                <div class="form-group">
                    <input @bind="newRoomName" placeholder="Room Name" />
                    <input @bind="newRoomDescription" placeholder="Description" />
                    <button @onclick="CreateRoom">Add Room</button>
                </div>

                <div class="admin-table">
                    @foreach (var room in rooms)
                {
                    <div class="admin-row">
                            <span><b>@room.Name</b> - @room.Description</span>
                            <div class="admin-actions">
                                <button class="icon-button" @onclick="() => EditRoom(room)">
                                    <i class="fa-solid fa-pen"></i>
                                </button>
                                <button class="icon-button delete" @onclick="() => DeleteRoom(room.Id)">
                                    <i class="fa-solid fa-trash"></i>
                                </button>
                            </div>
                        </div>
                }
                </div>
            </div>

            <div class="admin-section">
                <h3>Users</h3>
                <div class="admin-table">
                    @foreach (var user in users)
                {
                    <div class="admin-row">
                            <span>@user.Username - @user.Email</span>
                        </div>
                }
                </div>
            </div>
        </div>
}
</div>

@code {
private List<RoomDto> rooms = new();
private List<UserDto> users = new();
private bool isAdmin;
private string username = "";
private string newRoomName = "";
private string newRoomDescription = "";

protected override async Task OnInitializedAsync()
{
    var token = await AuthService.GetTokenAsync();
    var claims = AuthService.ParseToken(token);

    isAdmin = claims?.IsAdmin ?? false;
    username = claims?.Username ?? "";

    if (!isAdmin) return;

    rooms = await Http.GetFromJsonAsync<List<RoomDto>>("api/admin/rooms");
    users = await Http.GetFromJsonAsync<List<UserDto>>("api/admin/users");
}

private void EditRoom(RoomDto room)
{
    newRoomName = room.Name;
    newRoomDescription = room.Description;
}

private async Task CreateRoom()
{
    var roomData = new { Name = newRoomName, Description = newRoomDescription };
    var token = await AuthService.GetTokenAsync();
    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

    var response = await Http.PostAsJsonAsync("api/admin/rooms", roomData);
    if (response.IsSuccessStatusCode)
    {
        newRoomName = newRoomDescription = "";
        rooms = await Http.GetFromJsonAsync<List<RoomDto>>("api/admin/rooms");
    }
}

private async Task DeleteRoom(Guid id)
{
    await Http.DeleteAsync($"api/admin/rooms/{id}");
    rooms = await Http.GetFromJsonAsync<List<RoomDto>>("api/admin/rooms");
}
}
