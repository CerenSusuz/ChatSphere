@page "/chathub"
@inject IChatService ChatService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS


@if (ChatService == null || !ChatService.IsConnected)
{
    <p>Loading chat...</p>
}
else
{
    <div class="chat-container">
        <h3>Chat Room</h3>

        <!-- Available Rooms -->
        <div class="room-list">
            <h4>Available Rooms</h4>
            @foreach (var room in availableRooms)
            {
                <div class="room-item" @onclick="() => SelectRoom(room.Id)">
                    @room.Name (ID: @room.Id)
                </div>
            }
        </div>

        <!-- Join Room -->
        <div class="room-selection">
            <input @bind="roomId" placeholder="Enter Room ID..." />
            <button @onclick="JoinRoom" class="join-room-btn">Join Room</button>
        </div>

        <!-- Users in Room -->
        @if (!string.IsNullOrEmpty(currentRoom))
        {
            <div class="user-list">
                <h4>Users in @currentRoom</h4>
                @foreach (var user in usersInRoom)
                {
                    <div class="user-item">@user</div>
                }
            </div>

            <!-- Message Input -->
            <div class="chat-input">
                <input @bind="message" placeholder="Type a message..." />
                <button @onclick="SendMessage" class="send-btn">Send</button>
            </div>
        }
    </div>
}

@code {
    private string message = "";
    private string roomId = "";
    private string currentRoom = "";
    private List<string> usersInRoom = new();
    private List<(string Name, string Id)> availableRooms = new()
    {
        ("General Chat", "123"),
        ("Tech Talk", "456"),
        ("Gaming Zone", "789")
    };

    protected override async Task OnInitializedAsync()
    {
        var token = await AuthService.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            ChatService.SetToken(token);
            await ChatService.ConnectAsync();
        }
        else
        {
            Console.WriteLine("⚠️ Token is missing.");
            Navigation.NavigateTo("/login");
        }
    }

    private void SelectRoom(string id)
    {
        roomId = id;
    }

    private async Task JoinRoom()
    {
        if (!string.IsNullOrEmpty(roomId) && availableRooms.Any(r => r.Id == roomId))
        {
            await ChatService.JoinRoomAsync(roomId);
            currentRoom = roomId;
            ShowToastr($"✅ Joined Room: {roomId}");
            usersInRoom = await ChatService.GetUsersInRoomAsync(currentRoom);
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(message) && !string.IsNullOrEmpty(currentRoom))
        {
            await ChatService.SendMessageAsync(currentRoom, "Username", message);
            message = "";
        }
    }

    private void ShowToastr(string message)
    {
        JS.InvokeVoidAsync("showToastr", message);
    }
}
